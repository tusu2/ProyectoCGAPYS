<div id="contenido-principal">
    @{
        // Cargamos el contenido inicial del index usando la nueva vista parcial
        await Html.RenderPartialAsync("_IndexContentPartial");
    }
</div>

@section Scripts {
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        function debounce(func, delay) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }
   
        // Este código se ejecuta solo en esta página
        document.addEventListener('DOMContentLoaded', () => {

        
            const contenedor = document.getElementById('contenido-principal');
            function aplicarFiltrosPrioridad() {
                console.log("Aplicando filtros...");
                const nombre = document.getElementById('filtro-nombre-p')?.value || '';
                const campusId = document.getElementById('filtro-campus-p')?.value || '';
                const fechaInicio = document.getElementById('filtro-fecha-inicio-p')?.value || '';
                const fechaFin = document.getElementById('filtro-fecha-fin-p')?.value || '';
                const presupuestoMin = document.getElementById('filtro-presupuesto-min-p')?.value || '';

                const url = new URL('@Url.Action("AsignarPrioridades", "Proyecto")', window.location.origin);
                if (nombre) url.searchParams.append('nombre', nombre);
                if (campusId) url.searchParams.append('campusId', campusId);
                if (fechaInicio) url.searchParams.append('fechaInicio', fechaInicio);
                if (fechaFin) url.searchParams.append('fechaFin', fechaFin);
                if (presupuestoMin) url.searchParams.append('presupuestoMin', presupuestoMin);

                document.querySelector('.projects-container').innerHTML = '<p>Filtrando...</p>';
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        // Reemplazamos SOLO el contenedor de las tarjetas, no toda la página.
                        // Esto mantiene los filtros visibles.
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const nuevoContenedorProyectos = tempDiv.querySelector('.projects-container');
                        const contenedorActual = document.querySelector('.projects-container');

                        if (nuevoContenedorProyectos && contenedorActual) {
                            contenedorActual.innerHTML = nuevoContenedorProyectos.innerHTML;

                            // --- LÓGICA DE ANIMACIÓN ---
                            // Buscamos todas las nuevas tarjetas que acabamos de agregar
                            const cards = contenedorActual.querySelectorAll('.project-card');
                            // Las recorremos y les agregamos la clase 'is-visible' con un pequeño retraso
                            cards.forEach((card, index) => {
                                setTimeout(() => {
                                    card.classList.add('is-visible');
                                }, index * 80);
                            });
                        }
                    });
            }


            const mainContainer = document.querySelector('main .container');

            // Si lo encuentra, le quita la clase 'container' y le pone 'container-fluid'
            if (mainContainer) {
                mainContainer.classList.remove('container');
                mainContainer.classList.add('container-fluid');
            }

            inicializarLogicaIndex();


            const filtrarEnTiempoReal = debounce(aplicarFiltrosPrioridad, 400);

            contenedor.addEventListener('input', function (event) {
                if (event.target.id === 'filtro-nombre-p') {
                    const textoBusqueda = event.target.value;
                    // Solo filtramos con 3+ letras o si está vacío
                    if (textoBusqueda.length >= 3 || textoBusqueda.length === 0) {
                        filtrarEnTiempoReal();
                    }
                }
            });
            const aplicarFiltrosDebounced = debounce(() => {
                const listaUl = document.getElementById('lista-proyectos');
                if (listaUl) {
                    aplicarFiltros(listaUl);
                }
            }, 400);
            // --- Parte 2: El "Súper Listener" Delegado (VERSIÓN FINAL Y CORREGIDA) ---
            contenedor.addEventListener('click', function (event) {
                if (event.target.closest('#aplicar-filtros-prioridad')) {
                    aplicarFiltrosPrioridad();
                }
                if (event.target.closest('#aplicar-filtros-btn')) {
                    const listaUl = document.getElementById('lista-proyectos');
                    aplicarFiltros(listaUl);
                }
                if (event.target.closest('#limpiar-filtros-btn')) {
                    const listaUl = document.getElementById('lista-proyectos');
                    limpiarFiltros(listaUl);
                }


                const btnLimpiarFiltros = event.target.closest('#limpiar-filtros-prioridad');
                if (btnLimpiarFiltros) {
                    // Limpiamos los campos
                    document.getElementById('filtro-nombre-p').value = '';
                    document.getElementById('filtro-campus-p').value = '';
                    document.getElementById('filtro-fecha-inicio-p').value = '';
                    document.getElementById('filtro-fecha-fin-p').value = '';
                    document.getElementById('filtro-presupuesto-min-p').value = '';

                    // Simulamos un clic en "Aplicar" para recargar la lista sin filtros
                    document.getElementById('aplicar-filtros-prioridad').click();
                }





                const btnAsignar = event.target.closest('#btn-asignar-prioridades');
                if (btnAsignar) {
                    contenedor.innerHTML = '<h3 class="text-center">Cargando...</h3>';
                    fetch('@Url.Action("AsignarPrioridades", "Proyecto")')
                        .then(response => response.text())
                        .then(html => {
                            contenedor.innerHTML = html;
                        });
                    return; // Importante: detenemos la ejecución aquí
                }
                const btnRegresar = event.target.closest('#btn-regresar-index');
                if (btnRegresar) {
                    event.preventDefault();
                    contenedor.innerHTML = '<h3 class="text-center">Cargando...</h3>';
                    fetch('@Url.Action("GetIndexContent", "Proyecto")')
                        .then(response => response.text())
                        .then(html => {
                            contenedor.innerHTML = html;
                            if (typeof inicializarLogicaIndex === 'function') {
                                inicializarLogicaIndex();
                            }   
                        });
                    return; // Detenemos para no ejecutar otras lógicas
                }
                // ---- Lógica para los BOTONES DE PRIORIDAD (sin cambios) ----
                const priorityButton = event.target.closest('.btn-prioridad');
                if (priorityButton) {
                    event.preventDefault();
                    event.stopPropagation();

                    const proyectoId = priorityButton.dataset.id;
                    const nuevaPrioridad = priorityButton.dataset.prioridad;
                    const card = document.getElementById(`card-${proyectoId}`);

                    card.classList.add('card-disabled');
                    fetch(`/Proyecto/ActualizarPrioridad?id=${proyectoId}&prioridad=${nuevaPrioridad}`, { method: 'POST' })
                        .then(response => {
                            if (response.ok) {
                                card.classList.add(`priority-selected-${nuevaPrioridad}`);
                            } else {
                                alert('Error al actualizar la prioridad.');
                                card.classList.remove('card-disabled');
                            }
                        });
                    return; // Detenemos la ejecución para no interferir con el despliegue
                }

                // --- NUEVO LISTENER PARA EL FILTRADO EN TIEMPO REAL ---
                contenedor.addEventListener('input', function (event) {
                    // Si el evento ocurrió en nuestro campo de texto de nombre...
                    if (event.target.id === 'filtro-nombre-p') {
                        // ...llamamos a la versión con "debounce".
                        filtrarEnTiempoReal();
                    }
                });

                // ---- Lógica para DESPLEGAR DETALLES (NUEVA Y ROBUSTA) ----
                const clickableArea = event.target.closest('.clickable-area');
                if (clickableArea) {
                    const clickedCard = clickableArea.closest('.project-card');
                    const clickedPanel = document.getElementById(`details-container-${clickedCard.dataset.id}`);
                    const wasAlreadyActive = clickedPanel.classList.contains('active');

                    // 1. SIEMPRE cerramos todo primero para limpiar el estado.
                    document.querySelectorAll('.project-details-panel.active').forEach(openPanel => {
                        openPanel.classList.remove('active');
                    });
                    document.querySelectorAll('.project-card.active').forEach(activeCard => {
                        activeCard.classList.remove('active');
                    });

                    // 2. Si la tarjeta que clickeamos NO estaba abierta, la abrimos.
                    if (!wasAlreadyActive) {
                        clickedCard.classList.add('active');
                        clickedPanel.classList.add('active');

                        // Cargar datos si es la primera vez que se abre
                        if (clickedPanel.innerHTML.trim() === '') {
                            const proyectoId = clickedCard.dataset.id;
                            clickedPanel.innerHTML = '<p>Cargando detalles...</p>';
                            fetch(`/Proyecto/GetProyectoDetalles?id=${proyectoId}`)
                                .then(response => response.json())
                                .then(result => {
                                    if (result.success) {
                                        const data = result;
                                        clickedPanel.innerHTML = `
                                                                            <div class="details-grid">
                                                                                <div><span>Responsable</span><p>${data.nombreResponsable}</p></div>
                                                                                <div><span>Presupuesto</span><p>${data.presupuesto}</p></div>
                                                                                <div><span>Correo</span><p>${data.correo}</p></div>
                                                                                <div><span>Celular</span><p>${data.celular}</p></div>
                                                                                <div><span>Fecha de Solicitud</span><p>${data.fechaSolicitud}</p></div>
                                                                                <div><span>Fecha de Finalización Aprox.</span><p>${data.fechaFinalizacion}</p></div>
                                                                                <div><span>Campus</span><p>${data.campus}</p></div>
                                                                                <div><span>Fase Actual</span><p>${data.fase}</p></div>
                                                                            </div>
                                                                            <hr>
                                                                            <div><span>Descripción del Proyecto</span><p>${data.descripcion}</p></div>
                                                                        `;
                                    } else {
                                        clickedPanel.innerHTML = '<p class="text-danger">No se pudieron cargar los detalles.</p>';
                                    }
                                });
                        }
                    }
                }
            });
            

              
             

        });


    </script>
}