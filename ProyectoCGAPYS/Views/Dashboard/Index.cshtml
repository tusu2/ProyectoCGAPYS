@* Primero, declaramos el modelo que esta vista espera recibir del controlador. *@
@model ProyectoCGAPYS.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard de Control y Seguimiento";
}
<link rel="stylesheet" href="~/css/Dashboard.css" asp-append-version="true" />
<div class="espaciador-escritorio">
    <br>
    <br>
    <br>
</div>

<h3 class="dashboard-title">@ViewData["Title"]</h3>



<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="glass-card kpi-card">
            <div class="kpi-title">Proyectos Totales (2025)</div>
            <div class="kpi-number">@Model.KPIs.ProyectosTotales</div>
        </div>
    </div>

 
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="glass-card kpi-card">
            <div class="kpi-title">Proyectos Activos</div>
            <div class="kpi-number">@Model.KPIs.ProyectosActivos</div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
      
        <div class="glass-card kpi-card">
            <div class="kpi-title">Monto Ejercido</div>
            <div class="kpi-number currency">@Model.KPIs.MontoTotalEjercido.ToString("C")</div>
        </div>
    </div>
    <div class="col-lg col-md-6 mb-4">
        <div class="glass-card kpi-card">
            <div class="kpi-title">Presupuesto Comprometido</div>
            <div class="kpi-comprometido currency">@Model.KPIs.PresupuestoComprometido.ToString("C")</div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="glass-card kpi-card">
            <div class="kpi-title">Presupuesto Autorizado</div>
            <div class="kpi-Ejercido currency">@Model.KPIs.PresupuestoTotalAutorizado.ToString("C")</div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="glass-card kpi-card">
            <div class="kpi-title">Presupuesto Actual</div>
            <div class="kpi-Ejercido currency">@Model.KPIs.BalanceGeneralDisponible.ToString("C")</div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-lg-8 mb-4">
        <div class="glass-card chart-container">
            <h5>Distribución y Uso del Presupuesto General</h5>
            <canvas id="donaPresupuesto" style="max-height: 350px;"></canvas>
        </div>
    </div>
    <div class="col-lg-4 mb-4">
        <div class="glass-card chart-container">
            <h5>Proyectos por Fase</h5>
            <canvas id="barrasProyectosFase" style="max-height: 350px;"></canvas>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12 mb-4">
        <div class="glass-card chart-container">
            <h5>Estado por Fuente de Financiamiento</h5>
            <canvas id="barrasEstadoFondos" style="max-height: 300px;"></canvas>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-lg-6 mb-4">
        <div class="glass-card alert-list">
            <h5><i class="fas fa-exclamation-triangle"></i> Proyectos por Vencer (Próximos 30 días)</h5>
            <ul class="list-group list-group-flush">
                @if (!Model.ProyectosPorVencer.Any())
                {
                    <li class="list-group-item" style="color: var(--color-text-secondary);">¡Felicidades! No hay proyectos próximos a vencer.</li>
                }
                else
                {
                    @foreach (var item in Model.ProyectosPorVencer)
                    {
                        <li class="list-group-item">
                            @* --- ENLACE ACTUALIZADO --- *@
                            <a asp-controller="Proyectos" asp-action="Detalle" asp-route-id="@item.Id" asp-route-tab="resumen">@item.NombreProyecto</a>
                            <span class="badge">Vence: @item.FechaVencimiento?.ToString("dd/MM/yyyy")</span>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
    <div class="col-lg-6 mb-4">
        <div class="glass-card alert-list">
            <h5><i class="fas fa-file-invoice-dollar"></i> Estimaciones Pendientes de Pago</h5>
            <ul class="list-group list-group-flush">
                @if (!Model.EstimacionesPendientes.Any())
                {
                    <li class="list-group-item" style="color: var(--color-text-secondary);">¡Excelente! No hay estimaciones pendientes.</li>
                }
                else
                {
                    @foreach (var item in Model.EstimacionesPendientes)
                    {
                        <li class="list-group-item">
                            @* --- ENLACE ACTUALIZADO Y CONTEXTUALIZADO --- *@
                            <a asp-controller="Proyectos" asp-action="Detalle" asp-route-id="@item.Id" asp-route-tab="financiero">@item.NombreProyecto</a>
                            <span class="badge">Retraso: @item.DiasTranscurridos días</span>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
</div>

<div class="modal fade" id="projectListModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content glass-card">
            <div class="modal-header" style="border-bottom: 1px solid rgba(0,0,0,0.1);">
                <h5 class="modal-title" id="modalProjectListTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalProjectListBody">
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            // --- Configuración Global de Chart.js ---
            Chart.defaults.color = '#0A2240';
            Chart.defaults.font.family = "'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif";
            // Reducimos la animación para que el cambio se sienta instantáneo
            Chart.defaults.animation.duration = 500;

            // --- Colores y Gradientes ---
            const createGradient = (ctx, colorStart, colorEnd) => {
                const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                gradient.addColorStop(0, colorStart);
                gradient.addColorStop(1, colorEnd);
                return gradient;
            };

            const customTooltip = {
                backgroundColor: 'rgba(10, 34, 64, 0.9)',
                titleColor: 'rgba(255, 255, 255, 0.9)',
                bodyColor: 'rgba(255, 255, 255, 0.8)',
                borderColor: 'rgba(212, 175, 55, 0.5)',
                borderWidth: 1,
                padding: 10,
                cornerRadius: 8,
                displayColors: false,
            };

            // --- 1. GRÁFICO DE DONA: Presupuesto General (VERSIÓN FINAL) ---
            const ctxDona = document.getElementById('donaPresupuesto').getContext('2d');

            const originalComprometido = @Json.Serialize(Model.KPIs.PresupuestoComprometido);
            const originalDisponible = @Json.Serialize(Model.KPIs.BalanceGeneralDisponible);

            const gradientGold = createGradient(ctxDona, 'rgba(212, 175, 55, 1)', 'rgba(212, 175, 55, 0.7)');
            const gradientBlue = createGradient(ctxDona, 'rgba(58, 124, 165, 1)', 'rgba(58, 124, 165, 0.7)');
            const gradientGrey = createGradient(ctxDona, 'rgba(108, 117, 125, 1)', 'rgba(108, 117, 125, 0.7)');

            const donaChart = new Chart(ctxDona, {
                type: 'doughnut',
                data: {
                    labels: ['Monto Ejercido', 'Presupuesto Comprometido', 'Balance Disponible'],
                    datasets: [{
                        label: 'Presupuesto General',
                        data: [
        @Json.Serialize(Model.KPIs.MontoTotalEjercido),
                            originalComprometido,
                            originalDisponible
                        ],
                        backgroundColor: [gradientGold, gradientGrey, gradientBlue],
                        borderColor: 'rgba(248, 249, 250, 1)',
                        borderWidth: 4,
                        borderRadius: 15,
                        spacing: 10,
                        hoverOffset: 15
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        // --- LÓGICA DE CLIC REESCRITA DESDE CERO ---
                        legend: {
                            onClick: (e, legendItem, legend) => {
                                const chart = legend.chart;

                                // 1. Ocultamos o mostramos el dato manualmente. Esto también tacha la leyenda.
                                chart.toggleDataVisibility(legendItem.index);

                                // 2. Si el clic fue en "Presupuesto Comprometido", recalculamos.
                                if (legendItem.text === 'Presupuesto Comprometido') {
                                    const balanceIndex = 2; // El índice del 'Balance Disponible'

                                    // Verificamos el nuevo estado de visibilidad
                                    const isVisible = chart.getDataVisibility(legendItem.index);

                                    if (isVisible) {
                                        // Si ahora es visible, restauramos el balance original
                                        chart.data.datasets[0].data[balanceIndex] = originalDisponible;
                                    } else {
                                        // Si ahora está oculto, le sumamos el comprometido al balance
                                        chart.data.datasets[0].data[balanceIndex] = originalDisponible + originalComprometido;
                                    }
                                }

                                // 3. Actualizamos el gráfico para aplicar TODOS los cambios.
                                chart.update();
                            }
                        },
                        tooltip: {
                            ...customTooltip,
                            callbacks: {
                                label: function (context) {
                                    let value = context.raw;
                                    return context.label + ': ' + value.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' });
                                }
                            }
                        }
                    }
                }
            });

            // --- 2. GRÁFICO DE BARRAS: Estado por Fondos ---
            const ctxBarrasFondos = document.getElementById('barrasEstadoFondos').getContext('2d');

            new Chart(ctxBarrasFondos, {
                type: 'bar',
                data: {
                    labels: @Json.Serialize(Model.EstadoPorFondo.Select(f => f.NombreFondo)),
                    datasets: [
                        {
                            label: 'Monto Ejercido',
                            data: @Json.Serialize(Model.EstadoPorFondo.Select(f => f.MontoEjercido)),
                            backgroundColor: createGradient(ctxBarrasFondos, 'rgba(212, 175, 55, 0.9)', 'rgba(212, 175, 55, 0.6)'), // NUEVO: Gradiente
                            borderRadius: 8 // NUEVO: Bordes redondeados
                        },
                        {
                            label: 'Monto Disponible',
                            data: @Json.Serialize(Model.EstadoPorFondo.Select(f => f.MontoAutorizado - f.MontoEjercido)),
                            backgroundColor: createGradient(ctxBarrasFondos, 'rgba(58, 124, 165, 0.9)', 'rgba(58, 124, 165, 0.6)'), // NUEVO: Gradiente
                            borderRadius: 8 // NUEVO: Bordes redondeados
                        }
                    ]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            ...customTooltip, // NUEVO: Aplicamos el tooltip personalizado
                            mode: 'index'
                        }
                    },
                    scales: {
                        x: { stacked: true, grid: { display: false } }, // NUEVO: Ocultamos la cuadrícula
                        y: {
                            stacked: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)', // NUEVO: Cuadrícula muy sutil si se necesita
                                drawBorder: false
                            },
                            ticks: {
                                callback: function (value) {
                                    return (value / 1000) + 'k'; // Formato más corto (ej: 50k)
                                }
                            }
                        }
                    }
                }
            });

            // --- 3. GRÁFICO DE BARRAS HORIZONTALES: Proyectos por Fase ---
            const ctxBarrasFase = document.getElementById('barrasProyectosFase').getContext('2d');
            const projectListModal = new bootstrap.Modal(document.getElementById('projectListModal'));

            new Chart(ctxBarrasFase, {
                type: 'bar',
                data: {
                    labels: @Json.Serialize(Model.ProyectosPorFase.Select(f => f.Fase)),
                    datasets: [{
                        label: 'Nº de Proyectos',
                        data: @Json.Serialize(Model.ProyectosPorFase.Select(f => f.TotalProyectos)),

                        // --- ESTAS SON LAS DOS LÍNEAS QUE RESTAURAN EL ESTILO ---
                        backgroundColor: createGradient(ctxBarrasFase, 'rgba(120, 120, 120, 0.8)', 'rgba(120, 120, 120, 0.5)'),
                        borderRadius: 8
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    onClick: (e, elements, chart) => {
                        if (elements.length === 0) return;

                        const index = elements[0].index;
                        const fase = chart.data.labels[index];
                        const totalProyectos = chart.data.datasets[0].data[index];

                        if (fase === 'Finalizado' && totalProyectos > 0) {
                            const modalTitle = document.getElementById('modalProjectListTitle');
                            const modalBody = document.getElementById('modalProjectListBody');
                            modalTitle.textContent = `Proyectos en Fase: ${fase}`;
                            modalBody.innerHTML = '<p>Cargando proyectos...</p>';
                            projectListModal.show();

                            fetch(`/Dashboard/GetProyectosPorFase?fase=${fase}`)
                                .then(response => response.json())
                                .then(data => {
                                    let content = '<div class="project-cards-container">';
                                    data.forEach(proyecto => {
                                        content += `
                                <div class="project-card">
                                    <img src="${proyecto.imagenUrl}" alt="Imagen" class="project-card-image">

                                    <div class="project-card-info">
                                        <h5 class="project-card-title">${proyecto.nombreProyecto}</h5>
                                        <a href="/Dashboard/GenerarReporteHtmlAPdf?proyectoId=${proyecto.id}" target="_blank" class="btn btn-secondary btn-sm">
                                            Ver Reporte
                                        </a>
                                    </div>

                                    <div class="project-card-actions">
                                        <div class="email-form">
                                            <input type="email" class="form-control form-control-sm" placeholder="correo@@ejemplo.com" id="email-${proyecto.id}">
                                            <button class="btn btn-primary btn-sm" onclick="enviarPorCorreo('${proyecto.id}')">Enviar</button>
                                        </div>
                                        <span id="status-${proyecto.id}" class="d-block w-100 mt-2" style="font-size: 0.8em;"></span>
                                    </div>
                                </div>
                            `;
                                    });
                                    content += '</div>';
                                    modalBody.innerHTML = content;
                                })
                                .catch(error => {
                                    console.error('Error al cargar los proyectos:', error);
                                    modalBody.innerHTML = '<p class="text-danger">No se pudieron cargar los proyectos.</p>';
                                });
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            ...customTooltip // NUEVO: Aplicamos el tooltip personalizado
                        }
                    },
                    scales: {
                        x: {
                            grid: { display: false }, // NUEVO: Ocultamos la cuadrícula
                            beginAtZero: true,
                            ticks: { stepSize: 1 }
                        },
                        y: {
                            grid: { display: false } // NUEVO: Ocultamos la cuadrícula
                        }
                    }
                }
            });
        });
        function generarReporte(proyectoId, buttonElement) {
            const statusSpan = document.getElementById(`status-${proyectoId}`);
            statusSpan.textContent = 'Generando...';
            buttonElement.disabled = true;

            fetch(`/Dashboard/IniciarGeneracionPdf?proyectoId=${proyectoId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.jobId) {
                        verificarEstado(result.jobId, statusSpan, buttonElement);
                    } else {
                        statusSpan.textContent = 'Error al iniciar.';
                        buttonElement.disabled = false;
                    }
                })
                .catch(error => {
                    statusSpan.textContent = 'Error al iniciar.';
                    buttonElement.disabled = false;
                });
        }
        function enviarPorCorreo(proyectoId) {
    const emailInput = document.getElementById(`email-${proyectoId}`);
    const emailDestino = emailInput.value;
    const statusSpan = document.getElementById(`status-${proyectoId}`);

    // Validación simple de email
    if (!emailDestino || !emailDestino.includes('@@')) {
        statusSpan.textContent = 'Por favor, introduce un email válido.';
        statusSpan.className = 'text-danger';
        return;
    }

    statusSpan.textContent = 'Enviando....';
    statusSpan.className = 'text-info';

    // Creamos el cuerpo de la petición para nuestra API
    const requestBody = {
        proyectoId: proyectoId,
        emailDestino: emailDestino
    };

    // Hacemos la llamada a nuestra nueva API
    fetch('/Dashboard/EnviarReportePorCorreo', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
    })
    .then(response => response.json().then(data => ({ ok: response.ok, data })))
    .then(({ ok, data }) => {
        if (ok) {
            statusSpan.textContent = data.message;
            statusSpan.className = 'text-success';
        } else {
            statusSpan.textContent = `Error: ${data.message}`;
            statusSpan.className = 'text-danger';
        }
    })
    .catch(error => {
        statusSpan.textContent = 'Error de conexión.';
        statusSpan.className = 'text-danger';
    });
}

        function verificarEstado(jobId, statusSpan, buttonElement) {
            const intervalId = setInterval(() => {
                fetch(`/Dashboard/VerificarEstadoPdf?jobId=${jobId}`)
                    .then(response => response.json())
                    .then(result => {
                        if (result.status === 'Listo') {
                            clearInterval(intervalId);
                            statusSpan.innerHTML = `<a href="${result.url}" class="btn btn-success btn-sm" download>Descargar</a>`;
                            buttonElement.disabled = false;
                        } else if (result.status === 'Error') {
                            clearInterval(intervalId);
                            statusSpan.textContent = `Error: ${result.message}`;
                            buttonElement.disabled = false;
                        } else {
                            statusSpan.textContent += '.';
                        }
                    })
                    .catch(error => {
                        clearInterval(intervalId);
                        statusSpan.textContent = 'Error de conexión.';
                        buttonElement.disabled = false;
                    });
            }, 3000);
        }
    </script>
}